openapi: 3.0.0
servers:
  - url: "http://localhost:3000"

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
              upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

paths:

  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exists, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: dologin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"
                    
  /pictures/{pid}:
    parameters:
      - $ref: "#/components/parameters/PhotoId"
    post:
      tags: ["Pictures"]
      operationId: uploadPhoto
      summary: upload photo with a specific id
      description: |-
        Upload photo
      responses:
        "201":
          description: Picture successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description: Bad Request
        "500": 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
    delete:
      tags: ["Pictures"]
      operationId: deletePhoto
      summary: Delete a Photo
      responses:
        "204":
          description: Photo Deleted
        "404":
          description: Photo Not Found
        "500": 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
      
  /pictures/{pid}/likes:
      parameters:
        - $ref: "#/components/parameters/PhotoId"
      post:
        tags: ["Likes"]
        operationId: likePhoto
        summary: Like a Photo
        responses:
          "200":
            description: Photo Liked
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Like"
          "404":
            description: Photo Not Found
      delete:
        tags: ["Likes"]
        operationId: unlikePhoto
        summary: Unlike a Photo
        responses:
          "204":
            description: Photo Unliked
          "404":
            description: Photo Not Found
         
  /pictures/{pid}/comments:
      parameters:
        - $ref: "#/components/parameters/PhotoId"
      post:
        tags: ["Comments"]
        operationId: commentPhoto
        summary: Add a comment to a picture
        responses:
            "201":
              description: Comment added
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Comment"
            "400":
              description: Bad request, e.g., invalid comment
            "404":
              description: Picture not found
            "500": 
              description: Internal Server Error
              content:
                application/json:
                  schema:
                    $ref: "#/components/responses/InternalServerError"
      delete:
        summary: Uncomment a Photo
        tags: ["Comments"]
        operationId: uncommentPhoto
        responses:
          "204":
            description: Photo Uncommented
          "404":
            description: Photo Not Found
    
  /users/{uid}:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      operationId: getUserProfile
      tags: ["Users"]
      responses: 
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found

  /user/{uid}/username:
      parameters:
        - $ref: "#/components/parameters/UserId"
      put:
        tags: ["Users"]
        operationId: setMyUserName
        summary: Update my username
        description: Allows to set the username
        requestBody:
          description: JSON Object with my username
          required: true
          content:
            application/json:
              schema:
                type: object
                properties: 
                  username: 
                    type: string
                    description: "The new username"
                    example: "new_username"
        responses:
          "200": 
            description: Username updated sucessfully
          "400":
            description: Bad Request
          "404":
            description: User Not Found
  
  /user/{uid}/follow:
    parameters:
      - $ref: "#/components/parameters/UserId"
    get:
      operationId: getFollowees
      tags: ["Users"]
      summary: Get the list of followees
      responses:
        "200":
          description: List of followees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: User not found
    put:
      operationId: followUser
      tags: ["Users"]
      summary: Follow a User
      responses:
        "200":
          description: User followed
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/FollowResponse"
    delete:
      operationId: unfollowUser
      tags: ["Users"]
      summary: Unfollow an User
      responses:
        "204":
          description: User unfollowed
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/FollowResponse"
        "404":
          description: User not found

  /user/{uid}/ban:
    parameters:
      - $ref: "#/components/parameters/UserId"
    put:
      operationId: banUser
      tags: ["Users"]
      summary: Ban an User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: User Banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        "404":
          description: User Not Found
    delete:
      operationId: unbanUser
      tags: ["Users"]
      summary: Unban an User
      responses:
        "204":
          description: User Unbanned Successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        "404":
          description: User Not Banned
    
  
components:
  schemas:
    Photo:
      type: object
      description: Photo
      properties:
        PhotoId: 
          type: string
        owner:
          type: string
        url:
          type: string
        
    User:
      type: object
      description: User
      properties:
        UserId:
          type: string
        username:
          type: string
      required:
        - UserId
    
    Like:
      type: object
      description: Like
      properties:
        PhotoId:
          type: string
        UserId:
          type: string
      required:
        - PhotoId
        - UserId
    
    Comment:
      type: object
      description: Comment
      properties:
        message:
          type: string
        Userid:
          type: string
          description: ID of the commenting User
        PhotoId:
          type: string
          description: ID of the commented Photo

    FollowResponse:
      type: object
      description: Follow Response
      properties:
        followerId:
          type: string
        followeeId:
          type: string

    Ban:
      type: object
      description: Ban User
      properties:
        bannerId:
          type: string
        bannedId:
          type: string
  
  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      
  parameters:
    PhotoId:
        schema:
          type: string
        name: pid
        in: path
        required: true
        allowEmptyValue: false
    UserId:
      schema:
        type: string
      name: uid
      in: path
      required: true
      allowEmptyValue: false
