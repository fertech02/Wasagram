openapi: 3.0.0
servers:
  - url: "http://localhost:3000"

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
              upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

paths:

  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exists, it will be created, and an identifier 
        is returned. 
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Martin
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        "201":
          description: User login action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifiers:
                    type: string
                    example: abcdef012345

  /status:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
    get:
      tags: ["General"]
      operationId: getStatusMessage
      summary: Get status message for the user about issues / updates
      description: |-
        The response contains a status message meant for the user. It might
        contains information about current technical issues, update messages
        or general information.
      responses:
        "200":
          description: Status message available
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusInfo"
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /:
    get:
      tags: ["Group 1"]
      operationId: index
      summary: Get an index
      description: |-
        This is an example of an index API description
      responses:
        "200":
          description: Successful
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /context:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
    post:
      tags: ["Group 1"]
      operationId: getContext
      summary: Another API example
      description: |-
        Example description 2
      responses:
        "200":
          description: Request ok
          headers:
            X-Access-Token:
              description: Access token for authenticated requests
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /authenticated:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
    get:
      tags: ["Group 2"]
      operationId: getAuthenticatedExample
      summary: Get an endpoint with authentication
      description: |-
        Get an endpoint with auth
      security:
        - LegacyAuth: []
        - AppToken: []
      responses:
        "200":
          description: Logout successful
        "500": { $ref: "#/components/responses/InternalServerError" }
  

  
  /pictures/{PhotoId}:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
      - $ref: "#/components/parameters/PhotoId"
    post:
      tags: ["Pictures"]
      operationId: uploadPhoto
      summary: upload photo with a specific id
      description: |-
        Upload photo
      security:
        - LegacyAuth: []
      responses:
        "201":
          description: Picture successfully added
          content:
            image/png:
              schema:
                type: string
                format: binary
              example: Picture binary file
        "400":
          description: Bad Request
        "500": { $ref: "#/components/responses/InternalServerError"}
      
  /pictures/{PhotoId}/likes:
      post:
        tags: ["Likes"]
        operationId: likePhoto
        summary: Like a Photo
        parameters:
          - name: PhotoId
            in: path
            required: true
            schema:
              type: string
        responses:
          "200":
            description: Photo Liked
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Like"
          "404":
            description: Photo Not Found
      delete:
        tags: ["Likes"]
        operationId: unlikePhoto
        summary: Unlike a Photo
        parameters:
          - name: PhotoId
            in: path
            required: true
            schema:
              type: string
        responses:
          "204":
            description: Photo Unliked
          "404":
            description: Photo Not Found
         
  /pictures/{PhotoId}/comments:  
      post:
        tags: ["Comments"]
        operationId: commentPhoto
        summary: Add a comment to a picture
        parameters:
          - name: PhotoId
            in: path
            required: true
            schema:
              type: string
        requestBody:
          description: JSON object with the comment
          required: true
          content:
            application/json:
              schema:
                type: object
                description: The comment
                example: "This is a Comment"
        responses:
            "201":
              description: Comment was successfully added
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Comment"
            "400":
              description: Bad request, e.g., invalid comment
            "404":
              description: Picture not found
            "500": { $ref: "#/components/responses/InternalServerError" }
      delete:
        summary: Uncomment a Photo
        tags: ["Comments"]
        operationId: uncommentPhoto
        parameters:
          - name: PhotoId
            in: path
            required: true
            schema:
              type: string
        responses:
          "204":
            description: Photo Uncommented
          "404":
            description: Photo Not Found



  /users/{UserId}:
    get:
      operationId: getUserProfile
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found
          
  /user/{UserId}/username:
      parameters:
        - name: UserId
          in: path
          required: true
          description: Unique ID for the User
          schema:
            type: string
      put:
        tags: ["Users"]
        operationId: setMyUserName
        summary: Update my username
        description: Allows to set the username
        requestBody:
          description: JSON Object with my username
          required: true
          content:
            application/json:
              schema:
                type: object
                properties: 
                  username: 
                    type: string
                    description: "The new username"
                    example: "new_username"
        responses:
          "200": 
            description: Username updated sucessfully
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/User"
          "400":
            description: Bad Request
          "404":
            description: User Not Found
          "500": { $ref: "#/components/responses/InternalServerError"} 
  
  /user/{UserId}/follow:
    post:
      operationId: followUser
      summary: Follow a User
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User followed
          content:
            application/json:
              schema: { $ref: "#/components/schemas/FollowResponse" }
      security:
        - bearerAuth: []
    delete:
      operationId: unfollowUser
      summary: Unfollow an User
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User unfollowed
        "404":
          description: User not found

  /user/{UserId}/ban:
    put:
      operationId: banUser
      summary: Ban an User
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
      responses:
        "200":
          description: User Banned
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Ban" }
        "404":
          description: User Not Found
    delete:
      operationId: unbanUser
      summary: Unban an User
      parameters:
        - name: UserId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User Unbanned Successfully
        "404":
          description: User Not Banned
     
  /stream:
    get:
      security:
        - bearerAuth: []
      summary: Get photo stream from followed Users
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: followees
          in: query
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Photo'
      responses:
        "200":
          description: Photo stream
          headers:
            Cache-Control:
              schema:
                $ref: "#/components/schemas/Cache-Control"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Photo"
              example: |
                [{
                  "id":1
                  "url":"photo1.png"
                  "owner": {
                  "id": "user1",
                  "name": "John Doe"
                }]
      
  /autofeeder/{cat}:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
      - $ref: "#/components/parameters/cat"
    put:
      tags: ["Autofeeder"]
      operationId: createCatAutofeeder
      summary: Example of PUT operation
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Auto feed enabled
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Autofeeder"]
      operationId: deleteCatAutofeeder
      summary: Example of DELETE operation
      security:
        - LegacyAuth: []
      responses:
        "200":
          description: Auto feed disabled
        "400": { $ref: "#/components/responses/BadRequest" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /session/login:
    parameters:
      - $ref: "#/components/parameters/XAppBuild"
      - $ref: "#/components/parameters/XAppVersion"
      - $ref: "#/components/parameters/XAppLanguage"
      - $ref: "#/components/parameters/XAppPlatform"
    post:
      tags: ["Session management"]
      operationId: login
      summary: Log-in into system
      description: |-
        Perform a log-in action using username and password credentials.
        Returns a token which can be used in authenticated requests.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                userid:
                  type: string
                  pattern: '^[a-zA-Z0-9]+$'
                  minLength: 3
                  maxLength: 255
                password:
                  type: string
                  pattern: '^.*?$'
                  minLength: 8
                  maxLength: 255
      responses:
        "200":
          description: Login successful
          headers:
            X-Access-Token:
              description: Access token for authenticated requests
              schema: { type: string }
        "400": { $ref: "#/components/responses/BadRequest" }
        "403":
          description: Login failed
          headers:
            X-Message:
              description: Error message
              schema: { type: string }
        "500": { $ref: "#/components/responses/InternalServerError" }

components:
  schemas:
    StatusInfo:
      title: Status Info
      type: object
      properties:
        status:
          type: string
          enum:
            - info
            - warning
            - critical
            - ""
        title: { type: string }
        message: { type: string }
        url: { type: string }
    Photo:
      type: object
      description: Photo
      properties:
        PhotoId: 
          $ref: '#/components/parameters/PhotoId'
        url:
          type: string
        owner:
          $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        UserId:
          $ref: '#/components/parameters/UserId'
        username:
          type: string
        profileImage:
          type: object
        followers:
          type: array
          items:
            type: string
        followees:
          type: array
          items:
            type: string
        banned:
          type: array
          items:
            type: string
      required:
        - UserId
    Like:
      type: object
      properties:
        PhotoId:
          type: string
        UserId:
          type: string
    Comment:
      type: object
      properties:
        message:
          type: string
        Userid:
          type: string
          format: uuid
          description: ID of the commenting User
        PhotoId:
          type: string
          format: uuid
          description: ID of the commented Photo
    Ban:
      type: object
      properties:
        UserId:
          type: string
        reason:
          type: string
    FollowResponse:
      type: object
      properties:
        followerId:
          type: string
        followingId:
          type: string
        message:
          type: string
    Error:
      type: object
      properties: 
        message:
          type: string
    Cache-Control:
      type: string
      enum: [public, max-age=60]

  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    LegacyAuth:
      type: apiKey
      in: header
      name: X-App-Token
      description: |-
        App session token value. This value is sent by the server in the login
        and session refresh APIs.
    bearerAuth:
      type: http
      scheme: bearer
    AppToken:
      type: apiKey
      name: authorization
      in: header

  parameters:
    XAppVersion:
      schema:
        type: string
        pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
        minLength: 1
        maxLength: 10
      name: X-App-Version
      in: header
      required: true
      description: App human readable version ("semantic version" format)
      allowEmptyValue: false
    XAppBuild:
      schema: { type: integer }
      name: X-App-Build
      in: header
      required: true
      description: App build number
      allowEmptyValue: false
    XAppLanguage:
      schema:
        type: string
        pattern: '^[a-z]{2}([-_][A-Z]{2})?$'
        minLength: 2
        maxLength: 5
      name: X-App-Language
      in: header
      required: true
      description: App language in ISO 639-1 format
      allowEmptyValue: false
    XAppPlatform:
      schema:
        type: string
        enum: [ios, android]
      name: X-App-Platform
      in: header
      required: true
      description: An operating system / platform
      allowEmptyValue: false
    cat:
      schema:
        type: string
        pattern: '^[a-zA-Z]+$'
        minLength: 3
        maxLength: 10
      name: cat
      in: path
      required: true
      description: Cat
      allowEmptyValue: false
    PhotoId:
        schema:
          type: string
          format: uuid
        name: PhotoId
        in: path
        required: true
        allowEmptyValue: false
    UserId:
      schema:
        type: string
        format: uuid
      name: UserId
      in: path
      required: true
      allowEmptyValue: false
