openapi: 3.0.3

tags:
  - name: Login
    description: Operations related to user login
  - name: Photos
    description: Operations related to photos
  - name: Likes
    description: Operations related to likes
  - name: Comments
    description: Operations related to comments
  - name: Users
    description: Operations related to users
  - name: Bans
    description: Operations related to bans
  - name: Follows
    description: Operations related to follows

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
              upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

paths:
  /session/:
    post:
      security: []
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: |-
          User details for login.               
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/username"
        required: true
      responses:
        "200":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Object containing the user identifier.
                properties:
                  identifier:
                    type: string
                    description: The user's identifier
                    example: "abcdef012345"
        "201":
          description: User sign-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Object containing the user identifier.
                properties:
                  identifier:
                    type: string
                    description: The user's identifier
                    example: "abcdef012345"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
  
  /photos:
    post:
      tags: ["Photos"]
      summary: Upload a new picture
      operationId: uploadPhoto
      description: Upload a new picture
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Photo successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
                    
  /photos/{pid}:
    parameters:
      - $ref: "#/components/parameters/pid"
    get:
      tags: ["Photos"]
      operationId: getPhoto
      summary: Get a Photo
      description: Get a Photo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Photo returned successfully.
          content:
            img/jpg:
              schema:
                type: string
                format: binary
                description: The photo file from the filesystem.
                pattern: ".*"
                minLength: 1
                maxLength: 100000000000000
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Photos"]
      operationId: deletePhoto
      summary: Delete a Photo
      description: Delete a Photo
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Photo Deleted
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
      
  /photos/{pid}/likes:
      parameters:
        - $ref: "#/components/parameters/pid"
      get:
        tags: ["Likes"]
        operationId: getLikes
        summary: Get the likes of a Photo
        description: Get the likes of a Photo
        security:
          - bearerAuth: []
        responses:
          "200":
            description: Photo Likes
            content:
              application/json:
                schema:
                  type: object
                  description: NUMBER OF LIKES
                  properties:
                    likes:
                      type: integer
                      description: Number of likes
                      example: 0
          "400" : { $ref: "#/components/responses/BadRequest" }
          "401" : { $ref: "#/components/responses/UnauthorizedError" }
          "500" : { $ref: "#/components/responses/InternalServerError" }
  
  /photos/{pid}/likes/{uid}:
    parameters:
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/uid"
    put:
      tags: ["Likes"]
      operationId: likePhoto
      summary: Like a Photo
      description: Like a Photo
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Photo Liked
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Like"
        "400" : { $ref: "#/components/responses/BadRequest" }
        "401" : { $ref: "#/components/responses/UnauthorizedError" }
        "500" : { $ref: "#/components/responses/InternalServerError" }
    delete:
      tags: ["Likes"]
      operationId: unlikePhoto
      summary: Unlike a Photo
      description: Unlike a Photo
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Photo Unliked
        "400" : { $ref: "#/components/responses/BadRequest" }
        "401" : { $ref: "#/components/responses/UnauthorizedError" }
        "500" : { $ref: "#/components/responses/InternalServerError" }
    get:
      tags: ["Likes"]
      operationId: checkLike
      summary: Get a Like
      description: Get a Like
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Like Retrieved
          content:
            application/json:
              schema:
                type: object
                description: Object containing the like status.
                properties:
                  isLiked:
                    type: boolean
                    description: True if the user liked the photo
                    example: true
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
         
  /photos/{pid}/comments:
    parameters:
      - $ref: "#/components/parameters/pid"
    post:
      tags: ["Comments"]
      operationId: commentPhoto
      summary: Add a comment to a picture
      description: Add a comment to a picture
      security:
        - bearerAuth: []
      responses:
        "201":
          description: Comment added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    get:
      tags: ["Comments"]
      operationId: getComments
      summary: Get the comments of a Photo
      description: Get the comments of a Photo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Photo Comments
          content:
            application/json:
              schema:
                type: object
                description: List of Comments
                properties:
                  comments:
                    type: array
                    description: List of comments
                    minItems: 1
                    maxItems: 100
                    items:
                      $ref: "#/components/schemas/Comment"
        "400" : { $ref: "#/components/responses/BadRequest" }
        "401" : { $ref: "#/components/responses/UnauthorizedError" }
        "500" : { $ref: "#/components/responses/InternalServerError" }
  
  /photos/{pid}/comments/{cid}:
    parameters:
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/cid"
    delete:
      summary: Delete a Comment
      tags: ["Comments"]
      operationId: uncommentPhoto
      description: Delete a Comment
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Comment Deleted
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }


  /users:
    get:
      operationId: searchUser
      description: |-
        Get lists of possible users
        that have username similar 
        to the one you are searching.
      summary: Get users listed
      tags:
        - users
      parameters:
        - name: username
          in: query
          description: The username of the user
          required: true
          schema:
            $ref: "#/components/schemas/username"
      responses:
        "200":
          description: User id found and returned.
          content:
            application/json:
              schema:
                type: object
                description: Object containing the user identifier.
                properties:
                  UList:
                    type: array
                    description: The users that matched the search.
                    items: { $ref: "#/components/schemas/User" }
                    minItems: 0
                    maxItems: 1000
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    
  /users/{uid}/profile:
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      operationId: getUserProfile
      tags: ["Users"]
      summary: Get User Profile
      description: Get User Profile
      security:
        - bearerAuth: []
      responses: 
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        "404": { $ref: "#/components/responses/NotFoundError" }

  /users/{uid}/username:
    parameters:
      - $ref: "#/components/parameters/uid"
    put:
      tags: ["Users"]
      operationId: setMyUserName
      summary: Update my username
      description: Allows to set the username
      security:
        - bearerAuth: []
      requestBody:
        description: JSON Object with my username
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/username"
      responses:
        "200": 
          description: Username updated sucessfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/follow/{fid}:
    parameters:
      - $ref: "#/components/parameters/uid"
      - $ref: "#/components/parameters/fid"
    put:
      operationId: followUser
      tags: ["Follows"]
      summary: Follow an User
      description: Follow an User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User Followed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unfollowUser
      tags: ["Follows"]
      summary: Unfollow an User
      description: Unfollow an User
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User Unfollowed Successfully
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }

  /users/{uid}/ban/{bid}:
    parameters:
      - $ref: "#/components/parameters/uid"
      - $ref: "#/components/parameters/bid"  
    put:
      operationId: banUser
      tags: ["Bans"]
      summary: Ban an User
      description: Ban an User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User Banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
    delete:
      operationId: unbanUser
      tags: ["Bans"]
      summary: Unban an User
      description: Unban an User
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User Unbanned Successfully
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "404": { $ref: "#/components/responses/NotFoundError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
  
  /users/{uid}/stream:
    parameters:
      - $ref: "#/components/parameters/uid"
    get:
      operationId: getMyStream
      tags: ["Users"]
      summary: Get User Stream
      description: Get User Stream
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User Stream
          content:
            application/json:
              schema:
                type: object
                description: List of photos
                properties:
                  stream:
                    type: array
                    description: List of photos
                    minItems: 1
                    maxItems: 100
                    items:
                      $ref: "#/components/schemas/Photo"
        "401": { $ref: "#/components/responses/UnauthorizedError" }
        "500": { $ref: "#/components/responses/InternalServerError" }
     
components:

  schemas:
    
    username:
      title: username
      description: "This object represents the name of the user"
      type: string
      pattern: '^.*?$'
      example: MickeyMouse
      minLength: 3
      maxLength: 16
      
    Photo:
      type: object
      description: Photo
      properties:
        photo_id: 
          type: string
          description: The photo's identifier
          example: "abcdef012345"
        user_id:
          type: string
          description: The user's identifier
          example: "abcdef012345"
        file:
          description: The photo's file
          type: string
          format: binary
          minLength: 3
          maxLength: 16
        date:
          type: string
          description: The photo's date
          format: date-time
      required:
        - photo_id

    User:
      type: object
      description: User
      properties:
        Uid:
          type: string
          description: The user's identifier
        Username:
          type: string
          description: The user's username
      required:
        - Uid
        - Username
      
    Profile:
      type: object
      description: User Profile
      properties:
        PhotoList:
          type: array
          description: List of photos uploaded by the user
          items:
            $ref: "#/components/schemas/Photo"
          minItems: 0
          maxItems: 100
        Username:
          type: string
          description: The user's username
        FollowCount:
          type: integer
          description: Number of followers
          example: 0
          minimum: 0
          maximum: 9999
        FollowedCount:
          type: integer
          description: Number of followees
          example: 0
          minimum: 0
          maximum: 9999
        PhotoCount:
          type: integer
          description: Number of photos uploaded by the user
          example: 0
          minimum: 0
          maximum: 9999
        IsFollowed:
          type: boolean
          description: True if the user is followed by the logged user
          example: false
        IsBanned:
          type: boolean
          description: True if the user is banned by the logged user
          example: false
        
    Like:
      type: object
      description: Like
      properties:
        photo_id:
          type: string
          description: The photo's identifier
        user_id:
          type: string
          description: The user's identifier
      required:
        - photo_id
        - user_id
    
    Comment:
      type: object
      description: Comment
      properties:
        message:
          type: string
          description: The comment's message
        user_id:
          type: string
          description: ID of the commenting User
        photo_id:
          type: string
          description: ID of the commented Photo
      required:
        - user_id
        - photo_id

    Ban:
      type: object
      description: Ban User
      properties:
        banner_id:
          description: The user who banned
          type: string
        banned_id:
          description: The user who was banned
          type: string
      required:
        - banner_id
        - banned_id
  
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)

    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

    UnauthorizedError:
      description: Access token is missing or invalid

    NotFoundError:
      description: The requested resource was not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      
  parameters:
    pid:
        description: The photo's identifier
        schema:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
          minLength: 12
          maxLength: 12
        name: pid
        in: path
        required: true
        allowEmptyValue: false

    uid:
      description: The user's identifier
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
        minLength: 12
        maxLength: 12
      name: uid
      in: path
      required: true
      allowEmptyValue: false

    bid:
      description: The user's identifier
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
        minLength: 12
        maxLength: 12
      name: bid
      in: path
      required: true
      allowEmptyValue: false
    
    fid:
      description: The user's identifier
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
        minLength: 12
        maxLength: 12
      name: fid
      in: path
      required: true
      allowEmptyValue: false
    
    cid:
      description: The comment's identifier
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
        minLength: 12
        maxLength: 12
      name: cid
      in: path
      required: true
      allowEmptyValue: false
    
    
