openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
tags:
  - name: Login
    description: Operations related to user login
  - name: Photos
    description: Operations related to photos
  - name: Likes
    description: Operations related to likes
  - name: Comments
    description: Operations related to comments
  - name: Users
    description: Operations related to users

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
              upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

paths:

  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exists, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: do_login
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: User login details.
              properties:
                name:
                  type: string
                  description: The user's name
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: User identifier
                properties:
                  identifier:
                    type: string
                    description: The user's identifier
                    example: "abcdef012345"

  /photos:
    post:
      tags: ["Photos"]
      summary: Upload a new picture
      operationId: create_photo
      description: Upload a new picture
      responses:
        "201":
          description: Picture successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500": 
          $ref: "#/components/responses/InternalServerError"
    get:
      tags: ["Photos"]
      operationId: list_photos
      summary: Get all photos
      description: Get all photos
      responses:
        "200":
          description: Photos Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoList"
        "404":
          $ref: "#/components/responses/NotFound"
        "500": 
          $ref: "#/components/responses/InternalServerError"
                    
  /photos/{pid}:
    parameters:
      - $ref: "#/components/parameters/photo_id"
    get:
      tags: ["Photos"]
      operationId: get_photo
      summary: Get a Photo
      description: Get a Photo
      responses:
        "200":
          description: Photo Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags: ["Photos"]
      operationId: delete_photo
      summary: Delete a Photo
      description: Delete a Photo
      responses:
        "204":
          description: Photo Deleted
        "404":
          $ref: "#/components/responses/NotFound"
        "500": 
          $ref: "#/components/responses/InternalServerError"
      
  /photos/{pid}/likes:
      parameters:
        - $ref: "#/components/parameters/photo_id"
      get:
        tags: ["Likes"]
        operationId: get_photo_likes
        summary: Get the likes of a Photo
        description: Get the likes of a Photo
        responses:
          "200":
            description: Photo Likes
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PhotoLikesResponse"
          "404":
            $ref: "#/components/responses/NotFound"
      post:
        tags: ["Likes"]
        operationId: like_photo
        summary: Like a Photo
        description: Like a Photo
        responses:
          "200":
            description: Photo Liked
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Like"
          "404":
            $ref: "#/components/responses/NotFound"
      delete:
        tags: ["Likes"]
        operationId: delete_photo_like
        summary: Unlike a Photo
        description: Unlike a Photo
        responses:
          "204":
            description: Photo Unliked
          "404":
            $ref: "#/components/responses/NotFound"
         
  /photos/{pid}/comments:
      parameters:
        - $ref: "#/components/parameters/photo_id"
      post:
        tags: ["Comments"]
        operationId: comment_photo
        summary: Add a comment to a picture
        description: Add a comment to a picture
        responses:
            "201":
              description: Comment added
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Comment"
            "400":
              $ref: "#/components/responses/BadRequest"
            "404":
              $ref: "#/components/responses/NotFound"
            "500": 
              $ref: "#/components/responses/InternalServerError"
      delete:
        summary: Uncomment a Photo
        tags: ["Comments"]
        operationId: delete_comment_photo
        description: Remove a comment from a picture
        responses:
          "204":
            description: Photo Uncommented
          "404":
            $ref: "#/components/responses/NotFound"
      get:
        tags: ["Comments"]
        operationId: get_photo_comments
        summary: Get the comments of a Photo
        description: Get the comments of a Photo
        responses:
          "200":
            description: Photo Comments
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/PhotoCommentsResponse"
          "404":
            $ref: "#/components/responses/NotFound"
    
  /users/{uid}:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      operationId: get_user_profile
      tags: ["Users"]
      summary: Get User Profile
      description: Get User Profile
      responses: 
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          $ref: "#/components/responses/NotFound"

  /user/{uid}/username:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      tags: ["Users"]
      operationId: set_username
      summary: Update my username
      description: Allows to set the username
      requestBody:
        description: JSON Object with my username
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                username: 
                  type: string
                  description: "The new username"
                  example: "new_username"
      responses:
        "200": 
          description: Username updated sucessfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
  
  /user/{uid}/follow:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: put_follow_user
      tags: ["Users"]
      summary: Follow a User
      description: Follow a User
      responses:
        "200":
          description: User followed
    delete:
      operationId: delete_follow_user
      tags: ["Users"]
      summary: Unfollow an User
      description: Unfollow an User
      responses:
        "204":
          description: User unfollowed
        "404":
          description: User not found

  /user/{uid}/ban:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: put_ban_user
      tags: ["Users"]
      summary: Ban an User
      description: Ban an User
      responses:
        "200":
          description: User Banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        "404":
          description: User Not Found
    delete:
      operationId: delete_ban_user
      tags: ["Users"]
      summary: Unban an User
      description: Unban an User
      responses:
        "204":
          description: User Unbanned Successfully
        "404":
          description: User Not Banned
     
components:
  schemas:
    Photo:
      type: object
      description: Photo
      properties:
        photo_id: 
          type: string
          description: The photo's identifier
          example: "abcdef012345"
        user_id:
          type: string
        url:
          type: string
        date:
          type: string
          format: date-time
      required:
        - photo_id

    PhotoList:
      type: object
      description: List of Photos
      properties:
        photos:
          type: array
          items:
            $ref: "#/components/schemas/Photo"
      
    PhotoLikesResponse:
      type: object
      description: List of likes for a photo
      properties:
        likes:
          type: array
          items:
            $ref: "#/components/schemas/Like"
    
    PhotoCommentsResponse:
      type: object
      description: List of comments for a photo
      properties:
        comments:
          type: array
          items:
            $ref: "#/components/schemas/Comment"

    User:
      type: object
      description: User
      properties:
        user_id:
          type: string
        username:
          type: string
      required:
        - user_id
    
    Like:
      type: object
      description: Like
      properties:
        photo_id:
          type: string
        user_id:
          type: string
      required:
        - photo_id
        - user_id
    
    Comment:
      type: object
      description: Comment
      properties:
        message:
          type: string
        user_id:
          type: string
          description: ID of the commenting User
        photo_id:
          type: string
          description: ID of the commented Photo
      required:
        - user_id
        - photo_id

    Ban:
      type: object
      description: Ban User
      properties:
        banner_id:
          description: The user who banned
          type: string
        banned_id:
          description: The user who was banned
          type: string
      required:
        - banner_id
        - banned_id
  
  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs
    NotFound:
      description: The requested resource was not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      
  parameters:
    photo_id:
        description: The photo's identifier
        schema:
          type: string
        name: pid
        in: path
        required: true
        allowEmptyValue: false

    user_id:
      description: The user's identifier
      schema:
        type: string
      name: uid
      in: path
      required: true
      allowEmptyValue: false
