openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
tags:
  - name: Login
    description: Operations related to user login
  - name: Photos
    description: Operations related to photos
  - name: Likes
    description: Operations related to likes
  - name: Comments
    description: Operations related to comments
  - name: Users
    description: Operations related to users

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
              upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

paths:

  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exists, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              description: User login details.
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: User identifier
                properties:
                  identifier:
                    type: string
                    description: The user's identifier
                    example: "abcdef012345"

  /photos:
    post:
      tags: ["Photos"]
      summary: Upload a new picture
      operationId: uploadPhoto
      description: Upload a new picture
      responses:
        "201":
          description: Picture successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500": 
          $ref: "#/components/responses/InternalServerError"
    get:
      tags: ["Photos"]
      operationId: getPhotos
      summary: Get all photos
      description: Get all photos
      responses:
        "200":
          description: Photos Retrieved
          content:
            application/json:
              schema:
                type: object
                description: Photos
                properties:
                  photos:
                    type: array
                    minItems: 1
                    maxItems: 100
                    items:
                      $ref: "#/components/schemas/Photo"
        "404":
          description: No Photos Found
        "500": 
          $ref: "#/components/responses/InternalServerError"
                    
  /photos/{pid}:
    parameters:
      - $ref: "#/components/parameters/photo_id"
    get:
      tags: ["Photos"]
      operationId: getPhoto
      summary: Get a Photo
      description: Get a Photo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Photo Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "404":
          description: Photo Not Found
    delete:
      tags: ["Photos"]
      operationId: deletePhoto
      summary: Delete a Photo
      description: Delete a Photo
      responses:
        "204":
          description: Photo Deleted
        "404":
          description: Photo Not Found
        "500": 
          $ref: "#/components/responses/InternalServerError"
      
  /photos/{pid}/likes:
      parameters:
        - $ref: "#/components/parameters/photo_id"
      get:
        tags: ["Likes"]
        operationId: getLikes
        summary: Get the likes of a Photo
        description: Get the likes of a Photo
        security:
          - bearerAuth: []
        responses:
          "200":
            description: Photo Likes
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    likes:
                      type: array
                      minItems: 1
                      maxItems: 100
                      items:
                        $ref: "#/components/schemas/Like"
      post:
        tags: ["Likes"]
        operationId: likePhoto
        summary: Like a Photo
        description: Like a Photo
        security:
          - bearerAuth: []
        responses:
          "200":
            description: Photo Liked
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Like"
          "404":
            description: Photo Not Found
  
  /photos/{pid}/likes/{uid}:
      parameters:
        - $ref: "#/components/parameters/photo_id"
        - $ref: "#/components/parameters/user_id"
      delete:
        tags: ["Likes"]
        operationId: unlikePhoto
        summary: Unlike a Photo
        description: Unlike a Photo
        security:
          - bearerAuth: []
        responses:
          "204":
            description: Photo Unliked
          "404":
            description: Photo Not Liked
         
  /photos/{pid}/comments:
    parameters:
      - $ref: "#/components/parameters/photo_id"
    post:
      tags: ["Comments"]
      operationId: commentPhoto
      summary: Add a comment to a picture
      description: Add a comment to a picture
      security:
        - bearerAuth: []
      responses:
          "201":
            description: Comment added
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Comment"
          "400":
            $ref: "#/components/responses/BadRequest"
          "404":
            description: Photo Not Found
          "500": 
            $ref: "#/components/responses/InternalServerError"
    get:
      tags: ["Comments"]
      operationId: getComments
      summary: Get the comments of a Photo
      description: Get the comments of a Photo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Photo Comments
          content:
            application/json:
              schema:
                type: object
                description: List of comments
                properties:
                  comments:
                    type: array
                    minItems: 1
                    maxItems: 100
                    items:
                      $ref: "#/components/schemas/Comment"
        "404":
          description: Photo Not Found
     
  /photos/{pid}/comments/{uid}:
    parameters:
      - $ref: "#/components/parameters/photo_id"
      - $ref: "#/components/parameters/user_id"  
    delete:
      summary: Uncomment a Photo
      tags: ["Comments"]
      operationId: uncommentPhoto
      description: Remove a comment from a picture
      security:
        - bearerAuth: []
      responses:
        "204":
          description: Photo Uncommented
        "404":
          description: Comment Not Found
      

    
  /users/{uid}:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      operationId: getUserProfile
      tags: ["Users"]
      summary: Get User Profile
      description: Get User Profile
      responses: 
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User Not Found

  /user/{uid}/username:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      tags: ["Users"]
      operationId: setMyUsername
      summary: Update my username
      description: Allows to set the username
      security:
        - bearerAuth: []
      requestBody:
        description: JSON Object with my username
        required: true
        content:
          application/json:
            schema:
              type: object
              description: User's new username
              properties: 
                username: 
                  type: string
                  pattern: '^[a-zA-Z0-9-_]+$'
                  minLength: 3
                  maxLength: 12
                  description: "The new username"
                  example: "new_username"
      responses:
        "200": 
          description: Username updated sucessfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          description: User Not Found
  
  /user/{uid}/follow:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: followUser
      tags: ["Users"]
      summary: Follow a User
      description: Follow a User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User followed
    delete:
      operationId: unfollowUser
      tags: ["Users"]
      summary: Unfollow an User
      description: Unfollow an User
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User unfollowed
        "404":
          description: User Not Followed


  /user/{uid}/ban:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: bamUser
      tags: ["Users"]
      summary: Ban an User
      description: Ban an User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User Banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        "404":
          description: User Not Found
    get:
      operationId: getBannedUsers
      tags: ["Users"]
      summary: Get Banned Users
      description: Get Banned Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Banned Users
          content:
            application/json:
              schema:
                type: object
                properties:
                  banned_users:
                    type: array
                    minItems: 1
                    maxItems: 100
                    items:
                      $ref: "#/components/schemas/Ban"
        "404":
          description: No Banned Users

  /user/{uid}/ban/{bid}:
    parameters:
      - $ref: "#/components/parameters/user_id"
      - $ref: "#/components/parameters/banned_id"
    delete:
      operationId: unbanUser
      tags: ["Users"]
      summary: Unban an User
      description: Unban an User
      security:
        - bearerAuth: []
      responses:
        "204":
          description: User Unbanned Successfully
        "404":
          description: User Not Banned  
  
  /user/{uid}/stream:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      operationId: getMyStream
      tags: ["Users"]
      summary: Get User Stream
      description: Get User Stream
      responses:
        "200":
          description: User Stream
          content:
            application/json:
              schema:
                type: object
                properties:
                  stream:
                    type: array
                    minItems: 1
                    maxItems: 100
                    items:
                      $ref: "#/components/schemas/Photo"
        "404":
          description: User Not Found
        "500": 
          $ref: "#/components/responses/InternalServerError"
     
components:
  schemas:
    Photo:
      type: object
      description: Photo
      properties:
        photo_id: 
          type: string
          description: The photo's identifier
          example: "abcdef012345"
        user_id:
          type: string
        url:
          type: string
        date:
          type: string
          format: date-time
      required:
        - photo_id

    User:
      type: object
      description: User
      properties:
        user_id:
          type: string
        username:
          type: string
      required:
        - user_id
    
    Like:
      type: object
      description: Like
      properties:
        photo_id:
          type: string
        user_id:
          type: string
      required:
        - photo_id
        - user_id
    
    Comment:
      type: object
      description: Comment
      properties:
        message:
          type: string
        user_id:
          type: string
          description: ID of the commenting User
        photo_id:
          type: string
          description: ID of the commented Photo
      required:
        - user_id
        - photo_id

    Ban:
      type: object
      description: Ban User
      properties:
        banner_id:
          description: The user who banned
          type: string
        banned_id:
          description: The user who was banned
          type: string
      required:
        - banner_id
        - banned_id
  
  responses:
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      
  parameters:
    photo_id:
        description: The photo's identifier
        schema:
          type: string
          pattern: '^[a-zA-Z0-9-_]+$'
          minLength: 12
          maxLength: 12
        name: pid
        in: path
        required: true
        allowEmptyValue: false

    user_id:
      description: The user's identifier
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
        minLength: 12
        maxLength: 12
      name: uid
      in: path
      required: true
      allowEmptyValue: false
    
    banned_id:
      description: The banned identifier
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_]+$'
        minLength: 12
        maxLength: 12
      name: bid
      in: path
      required: true
      allowEmptyValue: false
