openapi: 3.0.0
servers:
  - url: "http://localhost:3000"
tags:
  - name: Login
    description: Operations related to user login
  - name: Photos
    description: Operations related to photos
  - name: Likes
    description: Operations related to likes
  - name: Comments
    description: Operations related to comments
  - name: Users
    description: Operations related to users

info:
  title: WASAPhoto
  description: Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto! You can
              upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

paths:

  /session:
    post:
      tags: ["Login"]
      summary: Logs in the user
      description: |-
        If the user does not exists, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: dologin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Maria
                  pattern: 'Ë†.*?$'
                  minLength: 3
                  maxLength: 16
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                    type: string
                    example: "abcdef012345"

  /photos:
    post:
      tags: ["Photos"]
      summary: Upload a new picture
      operationId: uploadPhoto
      responses:
        "201":
          description: Picture successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/responses/BadRequest"
        "500": 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
    get:
      tags: ["Photos"]
      operationId: getPhotos
      summary: Get all photos
      responses:
        "200":
          description: Photos Retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos:
                    type: array
                    items:
                      $ref: "#/components/schemas/Photo"
        "404":
          description: No Photos Found
        "500": 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
                    
  /photos/{pid}:
    parameters:
      - $ref: "#/components/parameters/photo_id"
    get:
      tags: ["Photos"]
      operationId: getPhoto
      summary: Get a Photo
      responses:
        "200":
          description: Photo Retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photo"
        "404":
          description: Photo Not Found
    delete:
      tags: ["Photos"]
      operationId: deletePhoto
      summary: Delete a Photo
      responses:
        "204":
          description: Photo Deleted
        "404":
          description: Photo Not Found
        "500": 
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/responses/InternalServerError"
      
  /photos/{pid}/likes:
      parameters:
        - $ref: "#/components/parameters/photo_id"
      get:
        tags: ["Likes"]
        operationId: getPhotoLikes
        summary: Get the likes of a Photo
        responses:
          "200":
            description: Photo Likes
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    likes:
                      type: array
                      items:
                        $ref: "#/components/schemas/Like"
          "404":
            description: Photo Not Found
      post:
        tags: ["Likes"]
        operationId: likePhoto
        summary: Like a Photo
        responses:
          "200":
            description: Photo Liked
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Like"
          "404":
            description: Photo Not Found
      delete:
        tags: ["Likes"]
        operationId: unlikePhoto
        summary: Unlike a Photo
        responses:
          "204":
            description: Photo Unliked
          "404":
            description: Photo Not Found
         
  /photos/{pid}/comments:
      parameters:
        - $ref: "#/components/parameters/photo_id"
      post:
        tags: ["Comments"]
        operationId: commentPhoto
        summary: Add a comment to a picture
        responses:
            "201":
              description: Comment added
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/Comment"
            "400":
              description: Bad request, e.g., invalid comment
            "404":
              description: Picture not found
            "500": 
              description: Internal Server Error
              content:
                application/json:
                  schema:
                    $ref: "#/components/responses/InternalServerError"
      delete:
        summary: Uncomment a Photo
        tags: ["Comments"]
        operationId: uncommentPhoto
        responses:
          "204":
            description: Photo Uncommented
          "404":
            description: Photo Not Found
    
  /users/{uid}:
    parameters:
      - $ref: "#/components/parameters/user_id"
    get:
      operationId: getUserProfile
      tags: ["Users"]
      summary: Get User Profile
      responses: 
        "200":
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "404":
          description: User not found

  /user/{uid}/username:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      tags: ["Users"]
      operationId: setMyUserName
      summary: Update my username
      description: Allows to set the username
      requestBody:
        description: JSON Object with my username
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: 
                username: 
                  type: string
                  description: "The new username"
                  example: "new_username"
      responses:
        "200": 
          description: Username updated sucessfully
        "400":
          description: Bad Request
        "404":
          description: User Not Found
  
  /user/{uid}/follow:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: followUser
      tags: ["Users"]
      summary: Follow a User
      responses:
        "200":
          description: User followed
    delete:
      operationId: unfollowUser
      tags: ["Users"]
      summary: Unfollow an User
      responses:
        "204":
          description: User unfollowed
        "404":
          description: User not found

  /user/{uid}/ban:
    parameters:
      - $ref: "#/components/parameters/user_id"
    put:
      operationId: banUser
      tags: ["Users"]
      summary: Ban an User
      responses:
        "200":
          description: User Banned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ban"
        "404":
          description: User Not Found
    delete:
      operationId: unbanUser
      tags: ["Users"]
      summary: Unban an User
      responses:
        "204":
          description: User Unbanned Successfully
        "404":
          description: User Not Banned
     
components:
  schemas:
    Photo:
      type: object
      description: Photo
      properties:
        photo_id: 
          type: string
        user_id:
          type: string
        url:
          type: string
        date:
          type: string
          format: date-time
      required:
        - photo_id
        
    User:
      type: object
      description: User
      properties:
        user_id:
          type: string
        username:
          type: string
      required:
        - user_id
    
    Like:
      type: object
      description: Like
      properties:
        photo_id:
          type: string
        user_id:
          type: string
      required:
        - photo_id
        - user_id
    
    Comment:
      type: object
      description: Comment
      properties:
        message:
          type: string
        user_id:
          type: string
          description: ID of the commenting User
        photo_id:
          type: string
          description: ID of the commented Photo
      required:
        - user_id
        - photo_id

    Ban:
      type: object
      description: Ban User
      properties:
        banner_id:
          type: string
        banned_id:
          type: string
      required:
        - banner_id
        - banned_id
  
  responses:
    Unauthorized:
      description: The access token is missing or it's expired
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc)
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      
  parameters:
    photo_id:
        schema:
          type: string
        name: pid
        in: path
        required: true
        allowEmptyValue: false

    user_id:
      schema:
        type: string
      name: uid
      in: path
      required: true
      allowEmptyValue: false
